// Code generated by hertz generator.

package order

import (
	"context"

	"github.com/Gorsonpy/catCafe/biz/dal/mysql"
	order "github.com/Gorsonpy/catCafe/biz/model/order"
	"github.com/Gorsonpy/catCafe/biz/pack"
	"github.com/Gorsonpy/catCafe/biz/service"
	"github.com/Gorsonpy/catCafe/pkg/errno"
	"github.com/Gorsonpy/catCafe/pkg/utils"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// QueryOrders .
// @router /order/query [POST]
func QueryOrders(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.QueryOrdersReq
	err = c.BindAndValidate(&req)
	resp := new(order.QueryOrderResp)
	if err != nil {
		pack.PackQueryOrder(resp, errno.GetErrorCode, err.Error(), nil)
		c.JSON(consts.StatusOK, resp)
		return
	}
	token_byte := c.GetHeader("token")
	claim, _ := utils.CheckToken(string(token_byte))
	code, msg, list := service.QueryOrders(claim.UserId, req.Status, req.Limit)
	pack.PackQueryOrder(resp, code, msg, list)
	c.JSON(consts.StatusOK, resp)
}

// CreateOrder .
// @router /order [POST]
func CreateOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.CreateOrderReq
	resp := new(order.CreateOrderResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.PackCreateOrder(resp, errno.CreateErrorCode, err.Error(), 0)
		c.JSON(consts.StatusOK, resp)
		return
	}
	token_byte := c.GetHeader("token")
	claim, _ := utils.CheckToken(string(token_byte))
	code, msg, id := service.CreateOrder(claim.UserId, &req)
	pack.PackCreateOrder(resp, code, msg, id)
	c.JSON(consts.StatusOK, resp)
}

// ConfirmOrder .
// @router /order/confirm [PUT]
func ConfirmOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.ConfirmOrderReq
	resp := new(order.BaseResponse)
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.PackOrderBase(resp, errno.ParamErrorCode, err.Error())
		c.JSON(consts.StatusOK, resp)
		return
	}
	token_byte := c.GetHeader("token")
	claim, _ := utils.CheckToken(string(token_byte))
	if !mysql.IsAdmin(claim.UserId) {
		resp.Code = errno.AuthorizationFailedErrCode
		resp.Msg = errno.PermissionFailedMsg
		c.JSON(consts.StatusOK, resp)
		return
	}
	code, msg := service.ConfirmOrder(&req)
	pack.PackOrderBase(resp, code, msg)
	c.JSON(consts.StatusOK, resp)
}

// UpdateOrder .
// @router /order [POST]
func UpdateOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.UpdateOrderReq
	resp := new(order.BaseResponse)
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.PackOrderBase(resp, errno.ParamErrorCode, err.Error())
		c.JSON(consts.StatusOK, resp)
		return
	}
	code, msg := service.UpdateOrder(&req)
	pack.PackOrderBase(resp, code, msg)
	c.JSON(consts.StatusOK, resp)
}

// DelOrder .
// @router /order [DELETE]
func DelOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.DelOrderReq
	resp := new(order.BaseResponse)
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.PackOrderBase(resp, errno.ParamErrorCode, err.Error())
		c.JSON(consts.StatusOK, resp)
		return
	}
	token_byte := c.GetHeader("token")
	claim, _ := utils.CheckToken(string(token_byte))
	if !mysql.IsAdmin(claim.UserId) {
		resp.Code = errno.AuthorizationFailedErrCode
		resp.Msg = errno.PermissionFailedMsg
		c.JSON(consts.StatusOK, resp)
		return
	}
	code, msg := service.DelOrder(req.OrderId)
	pack.PackOrderBase(resp, code, msg)
	c.JSON(consts.StatusOK, resp)
}
