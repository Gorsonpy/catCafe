// Code generated by hertz generator.

package cat

import (
	"context"

	cat "github.com/Gorsonpy/catCafe/biz/model/cat"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UpdateCat .
// @router /cat [PUT]
func UpdateCat(ctx context.Context, c *app.RequestContext) {
	var err error
	var req cat.CatModel
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(cat.BaseResponse)

	c.JSON(consts.StatusOK, resp)
}

// QueryCats .
// @router /cat [GET]
func QueryCats(ctx context.Context, c *app.RequestContext) {
	var err error
	var req cat.QueryCatsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(cat.QueryCatsResp)

	c.JSON(consts.StatusOK, resp)
}

// AddCat .
// @router /cat [POST]
func AddCat(ctx context.Context, c *app.RequestContext) {
	var err error
	var req cat.CatModel
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(cat.AddCatResp)

	c.JSON(consts.StatusOK, resp)
}

// DelCat .
// @router /cat [DELETE]
func DelCat(ctx context.Context, c *app.RequestContext) {
	var err error
	var req cat.BaseRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(cat.BaseResponse)

	c.JSON(consts.StatusOK, resp)
}
